{
  "name": "zig",
  "displayName": "Zig",
  "description": "Language support for the Zig programming language",
  "version": "0.3.0",
  "publisher": "ziglang",
  "icon": "images/zig-icon.png",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/ziglang/vscode-zig"
  },
  "engines": {
    "vscode": "^1.68.0"
  },
  "categories": [
    "Programming Languages"
  ],
  "activationEvents": [
    "onLanguage:zig",
    "workspaceContains:*/build.zig",
    "workspaceContains:*/build.zig.zon"
  ],
  "main": "./out/extension",
  "contributes": {
    "languages": [
      {
        "id": "zig",
        "extensions": [
          ".zig"
        ],
        "configuration": "./language-configuration.json"
      }
    ],
    "grammars": [
      {
        "language": "zig",
        "scopeName": "source.zig",
        "path": "./syntaxes/zig.tmLanguage.json"
      }
    ],
    "problemMatchers": [
      {
        "name": "zig",
        "owner": "zig",
        "fileLocation": [
          "relative",
          "${workspaceFolder}"
        ],
        "pattern": {
          "regexp": "([^\\s]*):(\\d+):(\\d+):\\s+(?:fatal\\s+)?(note|error):\\s+(.*)$",
          "file": 1,
          "line": 2,
          "column": 3,
          "severity": 4,
          "message": 5
        }
      }
    ],
    "configuration": {
      "type": "object",
      "title": "Zig",
      "properties": {
        "zig.buildOnSave": {
          "type": "boolean",
          "default": false,
          "description": "Compiles code on file save using the settings specified in 'Build Option'."
        },
        "zig.buildOption": {
          "type": "string",
          "default": "build",
          "enum": [
            "build",
            "build-exe",
            "build-lib",
            "build-obj"
          ],
          "description": "Which build command Zig should use to build the code."
        },
        "zig.buildArgs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "Extra arguments to passed to Zig."
        },
        "zig.buildFilePath": {
          "type": "string",
          "default": "${workspaceFolder}/build.zig",
          "description": "The path to build.zig. This is only required if zig.buildOptions = build."
        },
        "zig.zigPath": {
          "type": "string",
          "default": null,
          "description": "Set a custom path to the Zig binary. Defaults to 'zig' in your PATH."
        },
        "zig.revealOutputChannelOnFormattingError": {
          "type": "boolean",
          "default": true,
          "description": "Should output channel be raised on formatting error."
        },
        "zig.zls.enabled": {
          "scope": "resource",
          "type": "boolean",
          "description": "Whether to enable zls",
          "default": true
        },
        "zig.zls.trace.server": {
          "scope": "window",
          "type": "string",
          "enum": [
            "off",
            "messages",
            "verbose"
          ],
          "default": "off",
          "description": "Traces the communication between VS Code and the language server."
        },
        "zig.zls.check_for_update": {
          "scope": "resource",
          "type": "boolean",
          "description": "Whether to automatically check for new updates",
          "default": true
        },
        "zig.zls.path": {
          "scope": "resource",
          "type": "string",
          "description": "Path to `zls` executable. Example: `C:/zls/zig-cache/bin/zig.zls.exe`.",
          "format": "path"
        },
        "zig.zls.debugLog": {
          "scope": "resource",
          "type": "boolean",
          "description": "Enable debug logging in release builds of zig.zls."
        },
        "zig.zls.enable_snippets": {
          "scope": "resource",
          "type": "boolean",
          "description": "Enables snippet completions when the client also supports them",
          "default": false
        },
        "zig.zls.enable_ast_check_diagnostics": {
          "scope": "resource",
          "type": "boolean",
          "description": "Whether to enable ast-check diagnostics",
          "default": true
        },
        "zig.zls.enable_autofix": {
          "scope": "resource",
          "type": "boolean",
          "description": "Whether to automatically fix errors on save. Currently supports adding and removing discards.",
          "default": false
        },
        "zig.zls.enable_import_embedfile_argument_completions": {
          "scope": "resource",
          "type": "boolean",
          "description": "Whether to enable import/embedFile argument completions",
          "default": false
        },
        "zig.zls.enable_semantic_tokens": {
          "scope": "resource",
          "type": "boolean",
          "description": "Enables semantic token support when the client also supports it",
          "default": true
        },
        "zig.zls.enable_inlay_hints": {
          "scope": "resource",
          "type": "boolean",
          "description": "Enables inlay hint support when the client also supports it",
          "default": false
        },
        "zig.zls.inlay_hints_show_builtin": {
          "scope": "resource",
          "type": "boolean",
          "description": "Enable inlay hints for builtin functions",
          "default": true
        },
        "zig.zls.inlay_hints_exclude_single_argument": {
          "scope": "resource",
          "type": "boolean",
          "description": "Don't show inlay hints for single argument calls",
          "default": true
        },
        "zig.zls.inlay_hints_hide_redundant_param_names": {
          "scope": "resource",
          "type": "boolean",
          "description": "Hides inlay hints when parameter name matches the identifier (e.g. foo: foo)",
          "default": false
        },
        "zig.zls.inlay_hints_hide_redundant_param_names_last_token": {
          "scope": "resource",
          "type": "boolean",
          "description": "Hides inlay hints when parameter name matches the last token of a parameter node (e.g. foo: bar.foo, foo: &foo)",
          "default": false
        },
        "zig.zls.operator_completions": {
          "scope": "resource",
          "type": "boolean",
          "description": "Enables `*` and `?` operators in completion lists",
          "default": true
        },
        "zig.zls.warn_style": {
          "scope": "resource",
          "type": "boolean",
          "description": "Enables warnings for style guideline mismatches",
          "default": false
        },
        "zig.zls.highlight_global_var_declarations": {
          "scope": "resource",
          "type": "boolean",
          "description": "Whether to highlight global var declarations",
          "default": false
        },
        "zig.zls.use_comptime_interpreter": {
          "scope": "resource",
          "type": "boolean",
          "description": "Whether to use the comptime interpreter",
          "default": false
        },
        "zig.zls.include_at_in_builtins": {
          "scope": "resource",
          "type": "boolean",
          "description": "Whether the @ sign should be part of the completion of builtins",
          "default": false
        },
        "zig.zls.skip_std_references": {
          "scope": "resource",
          "type": "boolean",
          "description": "When true, skips searching for references in std. Improves lookup speed for functions in user's code. Renaming and go-to-definition will continue to work as is",
          "default": false
        },
        "zig.zls.max_detail_length": {
          "scope": "resource",
          "type": "integer",
          "description": "The detail field of completions is truncated to be no longer than this (in bytes)",
          "default": 1048576
        },
        "zig.zls.builtin_path": {
          "scope": "resource",
          "type": "string",
          "description": "Path to 'builtin;' useful for debugging, automatically set if let null",
          "default": null
        },
        "zig.zls.zig_lib_path": {
          "scope": "resource",
          "type": "string",
          "description": "Zig library path, e.g. `/path/to/zig/lib/zig`, used to analyze std library imports",
          "default": null
        },
        "zig.zls.zig_exe_path": {
          "scope": "resource",
          "type": "string",
          "description": "Zig executable path, e.g. `/path/to/zig/zig`, used to run the custom build runner. If `null`, zig is looked up in `PATH`. Will be used to infer the zig standard library path if none is provided",
          "default": null
        },
        "zig.zls.build_runner_path": {
          "scope": "resource",
          "type": "string",
          "description": "Path to the `build_runner.zig` file provided by zig.zls. null is equivalent to `${executable_directory}/build_runner.zig`",
          "default": null
        },
        "zig.zls.global_cache_path": {
          "scope": "resource",
          "type": "string",
          "description": "Path to a directroy that will be used as zig's cache. null is equivalent to `${KnownFloders.Cache}/zls`",
          "default": null
        }
      }
    },
    "commands": [
      {
        "command": "zig.build.workspace",
        "title": "Build Workspace",
        "category": "Zig",
        "description": "Build the current project using 'zig build'"
      },
      {
        "command": "zig.zls.install",
        "title": "Install Server",
        "category": "Zig Language Server"
      },
      {
        "command": "zig.zls.startRestart",
        "title": "Start / Restart Server",
        "category": "Zig Language Server"
      },
      {
        "command": "zig.zls.stop",
        "title": "Stop Server",
        "category": "Zig Language Server"
      },
      {
        "command": "zig.zls.openconfig",
        "title": "Open ZLS Config",
        "category": "Zig Language Server"
      },
      {
        "command": "zig.zls.update",
        "title": "Check for Server Updates",
        "category": "Zig Language Server"
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "esbuild --bundle --sourcemap=external --minify --external:vscode src/extension.ts --outdir=out --platform=node --format=cjs",
    "watch": "esbuild --watch --bundle --sourcemap=external --external:vscode src/extension.ts --outdir=out --platform=node --format=cjs",
    "test": "npm run compile && node ./node_modules/vscode/bin/test"
  },
  "devDependencies": {
    "@types/mocha": "^2.2.48",
    "@types/node": "^18.0.0",
    "@types/vscode": "^1.68.0",
    "@types/which": "^2.0.1",
    "vscode-test": "^1.4.0"
  },
  "dependencies": {
    "axios": "^1.3.2",
    "esbuild": "^0.12.1",
    "lodash-es": "^4.17.21",
    "lodash.debounce": "^4.0.8",
    "mkdirp": "^2.1.3",
    "vsce": "^2.11.0",
    "vscode-languageclient": "8.0.2-next.5",
    "which": "^3.0.0"
  }
}
